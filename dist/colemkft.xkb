//
// File          : colemkft.xkb
// Project page  : https://github.com/cedricr/colemak-french-touch
// Author        : Cedric Rossi
// Version       : 0.2.0
// Last change   : 2024-02-09
// License       : WTFPL - Do What The Fuck You Want Public License
//
// French (Colemak French Touch)
//
// To apply this keymap, use:
//   xkbcomp -w9 colemkft.xkb $DISPLAY
//

xkb_keymap {
  xkb_keycodes      { include "evdev"    };
  xkb_types         { include "complete" };
  xkb_compatibility { include "complete" };

  // Base layer + dead key
  // ╭╌╌╌╌╌┰─────┬─────┬─────┬─────┬─────┰─────┬─────┬─────┬─────┬─────┰╌╌╌╌╌┬╌╌╌╌╌╮
  // ┆ ~   ┃ !   │ @   │ #   │ $   │ %   ┃ ^   │ &   │ *   │ (   │ )   ┃ _   ┆ +   ┆
  // ┆ `   ┃ 1   │ 2   │ 3   │ 4   │ 5 € ┃ 6   │ 7   │ 8   │ 9   │ 0 ° ┃ -   ┆ =   ┆
  // ╰╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
  //       ┃ Q   │ W   │ F   │ P   │ G   ┃ J   │ L   │ O   │**   │ Y   ┃ {   ┆ }   ┆
  //       ┃   â │   ê │   î │   ô │   û ┃   - │   – │   œ │**   │     ┃ [   ┆ ]   ┆
  //       ┠─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
  //       ┃ A   │ R   │ S   │ T   │ D   ┃ H _ │ N   │ E   │ I   │ U   ┃ "   ┆ |   ┆
  //       ┃   à │   é │   ë │   ï │   ü ┃   _ │   — │   è │     │   ù ┃ '   ┆ \   ┆
  // ╭╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┴╌╌╌╌╌╯
  // ┆ >   ┃ Z   │ X   │ C   │ V   │ B   ┃ K « │ M » │ ; • │ :   │ ?   ┃
  // ┆ <   ┃   æ │     │   ç │     │     ┃   “ │   ” │ , · │ . … │ /   ┃
  // ╰╌╌╌╌╌┸─────┴─────┴─────┴─────┴─────┸─────┴─────┴─────┴─────┴─────┚

  // AltGr layer
  // ╭╌╌╌╌╌┰─────┬─────┬─────┬─────┬─────┰─────┬─────┬─────┬─────┬─────┰╌╌╌╌╌┬╌╌╌╌╌╮
  // ┆     ┃   ¹ │   ² │   ³ │   ⁴ │   ⁵ ┃   ⁶ │   ⁷ │   ⁸ │   ⁹ │   ⁰ ┃     ┆     ┆
  // ┆     ┃   ₁ │   ₂ │   ₃ │   ₄ │   ₅ ┃   ₆ │   ₇ │   ₈ │   ₉ │   ₀ ┃     ┆     ┆
  // ╰╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
  //       ┃     │     │     │  *¤ │   ‰ ┃  *^ │     │   × │  *´ │  *` ┃     ┆     ┆
  //       ┃   @ │   < │   > │   $ │   % ┃   ^ │   & │   * │   ' │   ` ┃     ┆     ┆
  //       ┠─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
  //       ┃     │   ⁽ │   ⁾ │     │   ≠ ┃  */ │   ± │   — │   ÷ │  *¨ ┃     ┆     ┆
  //       ┃   { │   ( │   ) │   } │   = ┃   \ │   + │   - │   / │   " ┃     ┆     ┆
  // ╭╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┴╌╌╌╌╌╯
  // ┆     ┃  *~ │     │     │   – │     ┃     │   ¬ │  *¸ │     │     ┃
  // ┆     ┃   ~ │   [ │   ] │   _ │   # ┃   | │   ! │   ; │   : │   ? ┃
  // ╰╌╌╌╌╌┸─────┴─────┴─────┴─────┴─────┸─────┴─────┴─────┴─────┴─────┚

  partial alphanumeric_keys modifier_keys
  xkb_symbols "colemkft" {
    include "pc"
    include "inet(evdev)"

    // The “OneDeadKey” is an ISO_Level3_Latch, i.e. a “dead AltGr” key.
    // This is the only way to have a multi-purpose dead key with XKB.

    // The real AltGr key should be an ISO_Level5_Switch; however,
    // ISO_Level5_Switch does not work as expected when applying this layout
    // with xkbcomp, so let’s use two groups instead and make the AltGr key a
    // group selector.

    name[group1]= "French (Colemak French Touch)";
    name[group2]= "AltGr";

    key.type[group1] = "FOUR_LEVEL";
    key.type[group2] = "TWO_LEVEL";

    // Digits
    key <AE01> {[ 1               , exclam          , VoidSymbol      , VoidSymbol      ],[ U2081           , onesuperior     ]}; // 1 !     ₁ ¹
    key <AE02> {[ 2               , at              , VoidSymbol      , VoidSymbol      ],[ U2082           , twosuperior     ]}; // 2 @     ₂ ²
    key <AE03> {[ 3               , numbersign      , VoidSymbol      , VoidSymbol      ],[ U2083           , threesuperior   ]}; // 3 #     ₃ ³
    key <AE04> {[ 4               , dollar          , VoidSymbol      , VoidSymbol      ],[ U2084           , U2074           ]}; // 4 $     ₄ ⁴
    key <AE05> {[ 5               , percent         , EuroSign        , VoidSymbol      ],[ U2085           , U2075           ]}; // 5 % €   ₅ ⁵
    key <AE06> {[ 6               , asciicircum     , VoidSymbol      , VoidSymbol      ],[ U2086           , U2076           ]}; // 6 ^     ₆ ⁶
    key <AE07> {[ 7               , ampersand       , VoidSymbol      , VoidSymbol      ],[ U2087           , U2077           ]}; // 7 &     ₇ ⁷
    key <AE08> {[ 8               , asterisk        , VoidSymbol      , VoidSymbol      ],[ U2088           , U2078           ]}; // 8 *     ₈ ⁸
    key <AE09> {[ 9               , parenleft       , VoidSymbol      , VoidSymbol      ],[ U2089           , U2079           ]}; // 9 (     ₉ ⁹
    key <AE10> {[ 0               , parenright      , degree          , VoidSymbol      ],[ U2080           , U2070           ]}; // 0 ) °   ₀ ⁰

    // Letters, first row
    key <AD01> {[ q               , Q               , acircumflex     , Acircumflex     ],[ at              , VoidSymbol      ]}; // q Q â Â @
    key <AD02> {[ w               , W               , ecircumflex     , Ecircumflex     ],[ less            , lessthanequal   ]}; // w W ê Ê < ≤
    key <AD03> {[ f               , F               , icircumflex     , Icircumflex     ],[ greater         , greaterthanequal]}; // f F î Î > ≥
    key <AD04> {[ p               , P               , ocircumflex     , Ocircumflex     ],[ dollar          , dead_currency   ]}; // p P ô Ô $ ¤
    key <AD05> {[ g               , G               , ucircumflex     , Ucircumflex     ],[ percent         , U2030           ]}; // g G û Û % ‰
    key <AD06> {[ j               , J               , minus           , VoidSymbol      ],[ asciicircum     , dead_circumflex ]}; // j J -   ^ ^
    key <AD07> {[ l               , L               , endash          , VoidSymbol      ],[ ampersand       , VoidSymbol      ]}; // l L –   &
    key <AD08> {[ o               , O               , oe              , OE              ],[ asterisk        , multiply        ]}; // o O œ Œ * ×
    key <AD09> {[ ISO_Level3_Latch, ISO_Level3_Latch, nobreakspace    , nobreakspace    ],[ apostrophe      , dead_acute      ]}; //         ' ´
    key <AD10> {[ y               , Y               , VoidSymbol      , VoidSymbol      ],[ grave           , dead_grave      ]}; // y Y     ` `

    // Letters, second row
    key <AC01> {[ a               , A               , agrave          , Agrave          ],[ braceleft       , VoidSymbol      ]}; // a A à À {
    key <AC02> {[ r               , R               , eacute          , Eacute          ],[ parenleft       , U207D           ]}; // r R é É ( ⁽
    key <AC03> {[ s               , S               , ediaeresis      , Ediaeresis      ],[ parenright      , U207E           ]}; // s S ë Ë ) ⁾
    key <AC04> {[ t               , T               , idiaeresis      , Idiaeresis      ],[ braceright      , VoidSymbol      ]}; // t T ï Ï }
    key <AC05> {[ d               , D               , udiaeresis      , Udiaeresis      ],[ equal           , notequal        ]}; // d D ü Ü = ≠
    key <AC06> {[ h               , H               , underscore      , underscore      ],[ backslash       , dead_stroke     ]}; // h H _ _ \ /
    key <AC07> {[ n               , N               , emdash          , VoidSymbol      ],[ plus            , plusminus       ]}; // n N —   + ±
    key <AC08> {[ e               , E               , egrave          , Egrave          ],[ minus           , emdash          ]}; // e E è È - —
    key <AC09> {[ i               , I               , VoidSymbol      , VoidSymbol      ],[ slash           , division        ]}; // i I     / ÷
    key <AC10> {[ u               , U               , ugrave          , Ugrave          ],[ quotedbl        , dead_diaeresis  ]}; // u U ù Ù " ¨

    // Letters, third row
    key <AB01> {[ z               , Z               , ae              , AE              ],[ asciitilde      , dead_tilde      ]}; // z Z æ Æ ~ ~
    key <AB02> {[ x               , X               , VoidSymbol      , VoidSymbol      ],[ bracketleft     , VoidSymbol      ]}; // x X     [
    key <AB03> {[ c               , C               , ccedilla        , Ccedilla        ],[ bracketright    , VoidSymbol      ]}; // c C ç Ç ]
    key <AB04> {[ v               , V               , VoidSymbol      , VoidSymbol      ],[ underscore      , endash          ]}; // v V     _ –
    key <AB05> {[ b               , B               , VoidSymbol      , VoidSymbol      ],[ numbersign      , VoidSymbol      ]}; // b B     #
    key <AB06> {[ k               , K               , U201C           , guillemotleft   ],[ bar             , brokenbar       ]}; // k K “ « | ¦
    key <AB07> {[ m               , M               , U201D           , guillemotright  ],[ exclam          , notsign         ]}; // m M ” » ! ¬
    key <AB08> {[ comma           , semicolon       , periodcentered  , U2022           ],[ semicolon       , dead_cedilla    ]}; // , ; · • ; ¸
    key <AB09> {[ period          , colon           , ellipsis        , VoidSymbol      ],[ colon           , VoidSymbol      ]}; // . : …   :
    key <AB10> {[ slash           , question        , VoidSymbol      , VoidSymbol      ],[ question        , VoidSymbol      ]}; // / ?     ?

    // Pinky keys
    key <AE11> {[ minus           , underscore      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // - _
    key <AE12> {[ equal           , plus            , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // = +
    key <AE13> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; //
    key <AD11> {[ bracketleft     , braceleft       , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // [ {
    key <AD12> {[ bracketright    , braceright      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // ] }
    key <AC11> {[ apostrophe      , quotedbl        , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // ' "
    key <AB11> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; //
    key <TLDE> {[ grave           , asciitilde      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // ` ~
    key <BKSL> {[ backslash       , bar             , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // \ |
    key <LSGT> {[ less            , greater         , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // < >

    // Space bar
    key <SPCE> {[ space           , U202F           , U2019           , U2019           ],[ space           , nobreakspace    ]}; //     ’ ’

    // AltGr
    // Note: the `ISO_Level5_Latch` here is meaningless but helps with Chromium.
    key <RALT> {
      type = "TWO_LEVEL",
      symbols = [ ISO_Level5_Latch, ISO_Level5_Latch ],
      actions = [ SetGroup(group=2), SetGroup(group=2) ]
    };
  };
};
// vim: ft=xkb:fdm=indent:ts=2:nowrap
