// Project page  : https://github.com/cedricr/colemak-french-touch
// Author        : Cedric Rossi
// Version       : 0.1.0
// Last change   : 2024-02-03
// License       : WTFPL - Do What The Fuck You Want Public License
//
// French (Colemak French Touch)
//
// Base layer + dead key
// ╭╌╌╌╌╌┰─────┬─────┬─────┬─────┬─────┰─────┬─────┬─────┬─────┬─────┰╌╌╌╌╌┬╌╌╌╌╌╮
// ┆ ~   ┃ €   │ @   │ #   │ $   │ %   ┃ ^   │ &   │ *   │ (   │ )   ┃ _   ┆ +   ┆
// ┆ `   ┃ 1   │ 2   │ 3   │ 4   │ 5   ┃ 6   │ 7   │ 8   │ 9   │ 0   ┃ /   ┆ =   ┆
// ╰╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
//       ┃ Q   │ W   │ F   │ P   │ G   ┃ J   │ L   │ O   │ !   │ Y   ┃ {   ┆ }   ┆
//       ┃   â │   ê │   î │   ô │   û ┃   € │     │   œ │** ! │     ┃ [   ┆ ]   ┆
//       ┠─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
//       ┃ A   │ R   │ S   │ T   │ D   ┃ H   │ N   │ E   │ I   │ U   ┃ "   ┆ |   ┆
//       ┃   à │   é │   ë │   ï │   ü ┃   ° │   _ │   è │     │   ù ┃ '   ┆ \   ┆
// ╭╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┴╌╌╌╌╌╯
// ┆ >   ┃ Z   │ X   │ C   │ V ² │ B ³ ┃ K « │ M » │ ? — │ ; • │ :   ┃
// ┆ <   ┃   æ │     │   ç │   ₂ │   ₃ ┃   “ │   ” │ - – │ , · │ . … ┃
// ╰╌╌╌╌╌┸─────┴─────┴─────┴─────┴─────┸─────┴─────┴─────┴─────┴─────┚
//
// AltGr layer
// ╭╌╌╌╌╌┰─────┬─────┬─────┬─────┬─────┰─────┬─────┬─────┬─────┬─────┰╌╌╌╌╌┬╌╌╌╌╌╮
// ┆     ┃     │     │     │     │     ┃     │     │     │     │     ┃     ┆     ┆
// ┆     ┃     │     │     │     │     ┃     │     │     │     │     ┃     ┆     ┆
// ╰╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
//       ┃     │     │     │     │     ┃     │     │     │     │     ┃     ┆     ┆
//       ┃   ^ │   < │   > │   $ │   % ┃   @ │   & │   * │   ! │   ` ┃     ┆     ┆
//       ┠─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
//       ┃     │     │     │     │     ┃     │     │     │     │     ┃     ┆     ┆
//       ┃   { │   ( │   ) │   } │   = ┃   \ │   + │   - │   / │   " ┃     ┆     ┆
// ╭╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┴╌╌╌╌╌╯
// ┆     ┃     │     │     │     │     ┃     │     │     │     │     ┃
// ┆     ┃   ~ │   [ │   ] │   _ │   # ┃   | │   ' │   ? │   ; │   : ┃
// ╰╌╌╌╌╌┸─────┴─────┴─────┴─────┴─────┸─────┴─────┴─────┴─────┴─────┚

partial alphanumeric_keys modifier_keys
xkb_symbols "colemkft" {
    name[group1]= "French (Colemak French Touch)";
    key.type[group1] = "EIGHT_LEVEL";

    // Digits
    key <AE01> {[ 1               , EuroSign        , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // 1 €
    key <AE02> {[ 2               , at              , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // 2 @
    key <AE03> {[ 3               , numbersign      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // 3 #
    key <AE04> {[ 4               , dollar          , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // 4 $
    key <AE05> {[ 5               , percent         , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // 5 %
    key <AE06> {[ 6               , asciicircum     , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // 6 ^
    key <AE07> {[ 7               , ampersand       , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // 7 &
    key <AE08> {[ 8               , asterisk        , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // 8 *
    key <AE09> {[ 9               , parenleft       , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // 9 (
    key <AE10> {[ 0               , parenright      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // 0 )

    // Letters, first row
    key <AD01> {[ q               , Q               , asciicircum     , VoidSymbol      , acircumflex     , Acircumflex     , VoidSymbol      , VoidSymbol      ]}; // q Q â Â ^
    key <AD02> {[ w               , W               , less            , lessthanequal   , ecircumflex     , Ecircumflex     , VoidSymbol      , VoidSymbol      ]}; // w W ê Ê < ≤
    key <AD03> {[ f               , F               , greater         , greaterthanequal, icircumflex     , Icircumflex     , VoidSymbol      , VoidSymbol      ]}; // f F î Î > ≥
    key <AD04> {[ p               , P               , dollar          , VoidSymbol      , ocircumflex     , Ocircumflex     , VoidSymbol      , VoidSymbol      ]}; // p P ô Ô $
    key <AD05> {[ g               , G               , percent         , VoidSymbol      , ucircumflex     , Ucircumflex     , VoidSymbol      , VoidSymbol      ]}; // g G û Û %
    key <AD06> {[ j               , J               , at              , VoidSymbol      , EuroSign        , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // j J €   @
    key <AD07> {[ l               , L               , ampersand       , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // l L     &
    key <AD08> {[ o               , O               , asterisk        , VoidSymbol      , oe              , OE              , VoidSymbol      , VoidSymbol      ]}; // o O œ Œ *
    key <AD09> {[ ISO_Level5_Latch, exclam          , exclam          , VoidSymbol      , exclam          , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // ! ! !   !
    key <AD10> {[ y               , Y               , grave           , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // y Y     `

    // Letters, second row
    key <AC01> {[ a               , A               , braceleft       , VoidSymbol      , agrave          , Agrave          , VoidSymbol      , VoidSymbol      ]}; // a A à À {
    key <AC02> {[ r               , R               , parenleft       , VoidSymbol      , eacute          , Eacute          , VoidSymbol      , VoidSymbol      ]}; // r R é É (
    key <AC03> {[ s               , S               , parenright      , VoidSymbol      , ediaeresis      , Ediaeresis      , VoidSymbol      , VoidSymbol      ]}; // s S ë Ë )
    key <AC04> {[ t               , T               , braceright      , VoidSymbol      , idiaeresis      , Idiaeresis      , VoidSymbol      , VoidSymbol      ]}; // t T ï Ï }
    key <AC05> {[ d               , D               , equal           , VoidSymbol      , udiaeresis      , Udiaeresis      , VoidSymbol      , VoidSymbol      ]}; // d D ü Ü =
    key <AC06> {[ h               , H               , backslash       , VoidSymbol      , degree          , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // h H °   \ 
    key <AC07> {[ n               , N               , plus            , VoidSymbol      , underscore      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // n N _   +
    key <AC08> {[ e               , E               , minus           , VoidSymbol      , egrave          , Egrave          , VoidSymbol      , VoidSymbol      ]}; // e E è È -
    key <AC09> {[ i               , I               , slash           , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // i I     /
    key <AC10> {[ u               , U               , quotedbl        , VoidSymbol      , ugrave          , Ugrave          , VoidSymbol      , VoidSymbol      ]}; // u U ù Ù "

    // Letters, third row
    key <AB01> {[ z               , Z               , asciitilde      , VoidSymbol      , ae              , AE              , VoidSymbol      , VoidSymbol      ]}; // z Z æ Æ ~
    key <AB02> {[ x               , X               , bracketleft     , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // x X     [
    key <AB03> {[ c               , C               , bracketright    , VoidSymbol      , ccedilla        , Ccedilla        , VoidSymbol      , VoidSymbol      ]}; // c C ç Ç ]
    key <AB04> {[ v               , V               , underscore      , VoidSymbol      , U2082           , twosuperior     , VoidSymbol      , VoidSymbol      ]}; // v V ₂ ² _
    key <AB05> {[ b               , B               , numbersign      , VoidSymbol      , U2083           , threesuperior   , VoidSymbol      , VoidSymbol      ]}; // b B ₃ ³ #
    key <AB06> {[ k               , K               , bar             , brokenbar       , U201C           , guillemotleft   , VoidSymbol      , VoidSymbol      ]}; // k K “ « | ¦
    key <AB07> {[ m               , M               , apostrophe      , VoidSymbol      , U201D           , guillemotright  , VoidSymbol      , VoidSymbol      ]}; // m M ” » '
    key <AB08> {[ minus           , question        , question        , VoidSymbol      , endash          , emdash          , VoidSymbol      , VoidSymbol      ]}; // - ? – — ?
    key <AB09> {[ comma           , semicolon       , semicolon       , VoidSymbol      , periodcentered  , U2022           , VoidSymbol      , VoidSymbol      ]}; // , ; · • ;
    key <AB10> {[ period          , colon           , colon           , VoidSymbol      , ellipsis        , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // . : …   :

    // Pinky keys
    key <AE11> {[ slash           , underscore      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // / _
    key <AE12> {[ equal           , plus            , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // = +
    key <AE13> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; //
    key <AD11> {[ bracketleft     , braceleft       , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // [ {
    key <AD12> {[ bracketright    , braceright      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // ] }
    key <AC11> {[ apostrophe      , quotedbl        , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // ' "
    key <AB11> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; //
    key <TLDE> {[ grave           , asciitilde      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // ` ~
    key <BKSL> {[ backslash       , bar             , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // \ |
    key <LSGT> {[ less            , greater         , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // < >

    // Space bar
    key <SPCE> {[ space           , U202F           , space           , nobreakspace    , U2019           , U2019           , VoidSymbol      , VoidSymbol      ]}; //     ’ ’

    // The AltGr key is an ISO_Level3_Shift:
    include "level3(ralt_switch)"

    // The “OneDeadKey” is an ISO_Level5_Latch, which is activated by this:
    // (note: MDSW [Mode_switch] is an alias for LVL5 on recent versions of XKB)
    replace key <MDSW> {
        type[Group1] = "ONE_LEVEL",
        symbols[Group1] = [ ISO_Level5_Shift ]
    };
    modifier_map Mod3 { <MDSW> };
};
